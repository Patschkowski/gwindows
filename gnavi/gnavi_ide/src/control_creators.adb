--  This file contains only automatically generated code.
--  DO NOT MODIFY !
--  Change the `datastore\controls.xml` file instead.
--  Generated by: Control_Generator.

with GWindows.Colors;
--  with GWindows.GStrings.IO; use GWindows.GStrings.IO;
with GWindows.Static_Controls;
with GWindows.Buttons;
with GWindows.Edit_Boxes;
with GWindows.Edit_Boxes.Rich;
with GWindows.Scintilla;
with GWindows.List_Boxes;
with GWindows.Combo_Boxes;
with GWindows.Common_Controls;
with GWindows.Panels;
with GWindows.Scroll_Panels;
with GWindows.Packing_Boxes;
with GWindows.Drawing_Panels;
with GWindows.Scroll_Bars;
with GWindows.GControls.GSize_Bars;
with GWindows.GControls.Duration;
with GWindows.GControls.Duration.Edit;

package body Control_Creators is

   --  Control: Label

   function Create_Index_1
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Static_Controls.Label_Type);
   begin
      GWindows.Static_Controls.Run_Mode 
        (GWindows.Static_Controls.Label_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Static_Controls.Create 
        (GWindows.Static_Controls.Label_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Alignment => GWindows.Static_Controls.Alignment_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Alignment"))),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Static_Controls.Visible
                 (GWindows.Static_Controls.Label_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Static_Controls.Dock
                 (GWindows.Static_Controls.Label_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Static_Controls.Group
                 (GWindows.Static_Controls.Label_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Static_Controls.Tab_Stop
                 (GWindows.Static_Controls.Label_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Static_Controls.Enabled
                 (GWindows.Static_Controls.Label_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Static_Controls.Border
                 (GWindows.Static_Controls.Label_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_1;

   --  Control: Icon

   function Create_Index_2
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Static_Controls.Icon_Type);
   begin
      GWindows.Static_Controls.Run_Mode 
        (GWindows.Static_Controls.Icon_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Static_Controls.Create 
        (GWindows.Static_Controls.Icon_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Alignment => GWindows.Static_Controls.Alignment_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Alignment"))),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Static_Controls.Visible
                 (GWindows.Static_Controls.Icon_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Static_Controls.Dock
                 (GWindows.Static_Controls.Icon_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Static_Controls.Group
                 (GWindows.Static_Controls.Icon_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Static_Controls.Tab_Stop
                 (GWindows.Static_Controls.Icon_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Static_Controls.Enabled
                 (GWindows.Static_Controls.Icon_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Static_Controls.Border
                 (GWindows.Static_Controls.Icon_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_2;

   --  Control: Bitmap

   function Create_Index_3
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Static_Controls.Bitmap_Type);
   begin
      GWindows.Static_Controls.Run_Mode 
        (GWindows.Static_Controls.Bitmap_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Static_Controls.Create 
        (GWindows.Static_Controls.Bitmap_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Alignment => GWindows.Static_Controls.Alignment_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Alignment"))),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Static_Controls.Visible
                 (GWindows.Static_Controls.Bitmap_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Static_Controls.Dock
                 (GWindows.Static_Controls.Bitmap_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Static_Controls.Group
                 (GWindows.Static_Controls.Bitmap_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Static_Controls.Tab_Stop
                 (GWindows.Static_Controls.Bitmap_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Static_Controls.Enabled
                 (GWindows.Static_Controls.Bitmap_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Static_Controls.Border
                 (GWindows.Static_Controls.Bitmap_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_3;

   --  Control: Meta File

   function Create_Index_4
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Static_Controls.Meta_File_Type);
   begin
      GWindows.Static_Controls.Run_Mode 
        (GWindows.Static_Controls.Meta_File_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Static_Controls.Create 
        (GWindows.Static_Controls.Meta_File_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Alignment => GWindows.Static_Controls.Alignment_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Alignment"))),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Static_Controls.Visible
                 (GWindows.Static_Controls.Meta_File_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Static_Controls.Dock
                 (GWindows.Static_Controls.Meta_File_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Static_Controls.Group
                 (GWindows.Static_Controls.Meta_File_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Static_Controls.Tab_Stop
                 (GWindows.Static_Controls.Meta_File_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Static_Controls.Enabled
                 (GWindows.Static_Controls.Meta_File_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Static_Controls.Border
                 (GWindows.Static_Controls.Meta_File_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_4;

   --  Control: Button

   function Create_Index_5
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_5;

   --  Control: Default Button

   function Create_Index_6
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Default_Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Default_Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Default_Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Default_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Default_Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Default_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Default_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Default_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Default_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_6;

   --  Control: Cancel Button

   function Create_Index_7
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Cancel_Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Cancel_Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Cancel_Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Cancel_Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_7;

   --  Control: Default Cancel Button

   function Create_Index_8
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Default_Cancel_Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Default_Cancel_Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Default_Cancel_Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Default_Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Default_Cancel_Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Default_Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Default_Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Default_Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Default_Cancel_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_8;

   --  Control: Check Box

   function Create_Index_9
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Check_Box_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Check_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Check_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Check_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Check_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Check_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Check_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Check_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Check_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "State" then
               GWindows.Buttons.State
                 (GWindows.Buttons.Check_Box_Type (C.all),
                  GWindows.Buttons.Check_State_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_9;

   --  Control: Two State Button

   function Create_Index_10
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Two_State_Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Two_State_Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Two_State_Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Two_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Two_State_Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Two_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Two_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Two_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Two_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "State" then
               GWindows.Buttons.State
                 (GWindows.Buttons.Two_State_Button_Type (C.all),
                  GWindows.Buttons.Check_State_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_10;

   --  Control: Radio Button

   function Create_Index_11
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Radio_Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Radio_Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Radio_Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Radio_Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "State" then
               GWindows.Buttons.State
                 (GWindows.Buttons.Radio_Button_Type (C.all),
                  GWindows.Buttons.Check_State_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_11;

   --  Control: Push Radio Button

   function Create_Index_12
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Push_Radio_Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Push_Radio_Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Push_Radio_Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Push_Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Push_Radio_Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Push_Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Push_Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Push_Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Push_Radio_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "State" then
               GWindows.Buttons.State
                 (GWindows.Buttons.Push_Radio_Button_Type (C.all),
                  GWindows.Buttons.Check_State_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_12;

   --  Control: Three State Box

   function Create_Index_13
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Three_State_Box_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Three_State_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Three_State_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Three_State_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Three_State_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Three_State_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Three_State_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Three_State_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Three_State_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "State" then
               GWindows.Buttons.State
                 (GWindows.Buttons.Three_State_Box_Type (C.all),
                  GWindows.Buttons.Three_State_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_13;

   --  Control: Three State Button

   function Create_Index_14
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Three_State_Button_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Three_State_Button_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Three_State_Button_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Three_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Three_State_Button_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Three_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Three_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Three_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Three_State_Button_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "State" then
               GWindows.Buttons.State
                 (GWindows.Buttons.Three_State_Button_Type (C.all),
                  GWindows.Buttons.Three_State_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_14;

   --  Control: Edit Box

   function Create_Index_15
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Edit_Boxes.Edit_Box_Type);
   begin
      GWindows.Edit_Boxes.Run_Mode 
        (GWindows.Edit_Boxes.Edit_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Edit_Boxes.Create 
        (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Horizontal_Scroll => GNAVI_Window.Get_Create_Property (Control_XML, "Horizontal_Scroll"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Edit_Boxes.Visible
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Edit_Boxes.Dock
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Edit_Boxes.Group
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Edit_Boxes.Tab_Stop
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Edit_Boxes.Enabled
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Edit_Boxes.Border
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Lower_Case_Only" then
               GWindows.Edit_Boxes.Lower_Case_Only
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Lower_Case_Only"));
            elsif P = "Upper_Case_Only" then
               GWindows.Edit_Boxes.Upper_Case_Only
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Upper_Case_Only"));
            elsif P = "Digits_Only" then
               GWindows.Edit_Boxes.Digits_Only
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Digits_Only"));
            elsif P = "Read_Only" then
               GWindows.Edit_Boxes.Read_Only
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Read_Only"));
            elsif P = "Text_Limit" then
               GWindows.Edit_Boxes.Text_Limit
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Text_Limit"));
            elsif P = "Modified" then
               GWindows.Edit_Boxes.Modified
                 (GWindows.Edit_Boxes.Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Modified"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_15;

   --  Control: Multi Line Edit Box

   function Create_Index_16
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type);
   begin
      GWindows.Edit_Boxes.Run_Mode 
        (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Edit_Boxes.Create 
        (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Horizontal_Scroll => GNAVI_Window.Get_Create_Property (Control_XML, "Horizontal_Scroll"),
         Vertical_Scroll => GNAVI_Window.Get_Create_Property (Control_XML, "Vertical_Scroll"),
         Capture_Return => GNAVI_Window.Get_Create_Property (Control_XML, "Capture_Return"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Edit_Boxes.Visible
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Edit_Boxes.Dock
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Edit_Boxes.Group
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Edit_Boxes.Tab_Stop
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Edit_Boxes.Enabled
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Edit_Boxes.Border
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Lower_Case_Only" then
               GWindows.Edit_Boxes.Lower_Case_Only
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Lower_Case_Only"));
            elsif P = "Upper_Case_Only" then
               GWindows.Edit_Boxes.Upper_Case_Only
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Upper_Case_Only"));
            elsif P = "Digits_Only" then
               GWindows.Edit_Boxes.Digits_Only
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Digits_Only"));
            elsif P = "Read_Only" then
               GWindows.Edit_Boxes.Read_Only
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Read_Only"));
            elsif P = "Text_Limit" then
               GWindows.Edit_Boxes.Text_Limit
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Text_Limit"));
            elsif P = "Modified" then
               GWindows.Edit_Boxes.Modified
                 (GWindows.Edit_Boxes.Multi_Line_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Modified"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_16;

   --  Control: Rich Edit Box

   function Create_Index_17
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type);
   begin
      GWindows.Edit_Boxes.Rich.Run_Mode 
        (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Edit_Boxes.Rich.Create 
        (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Horizontal_Scroll => GNAVI_Window.Get_Create_Property (Control_XML, "Horizontal_Scroll"),
         Vertical_Scroll => GNAVI_Window.Get_Create_Property (Control_XML, "Vertical_Scroll"),
         Capture_Return => GNAVI_Window.Get_Create_Property (Control_XML, "Capture_Return"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Edit_Boxes.Rich.Visible
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Edit_Boxes.Rich.Dock
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Edit_Boxes.Rich.Group
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Edit_Boxes.Rich.Tab_Stop
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Edit_Boxes.Rich.Enabled
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Edit_Boxes.Rich.Border
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Lower_Case_Only" then
               GWindows.Edit_Boxes.Rich.Lower_Case_Only
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Lower_Case_Only"));
            elsif P = "Upper_Case_Only" then
               GWindows.Edit_Boxes.Rich.Upper_Case_Only
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Upper_Case_Only"));
            elsif P = "Digits_Only" then
               GWindows.Edit_Boxes.Rich.Digits_Only
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Digits_Only"));
            elsif P = "Read_Only" then
               GWindows.Edit_Boxes.Rich.Read_Only
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Read_Only"));
            elsif P = "Text_Limit" then
               GWindows.Edit_Boxes.Rich.Text_Limit
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Text_Limit"));
            elsif P = "Modified" then
               GWindows.Edit_Boxes.Rich.Modified
                 (GWindows.Edit_Boxes.Rich.Rich_Edit_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Modified"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_17;

   --  Control: Scintilla Editor

   function Create_Index_18
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Scintilla.Scintilla_Type);
   begin
      GWindows.Scintilla.Run_Mode 
        (GWindows.Scintilla.Scintilla_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Scintilla.Create 
        (GWindows.Scintilla.Scintilla_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Scintilla.Visible
                 (GWindows.Scintilla.Scintilla_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Scintilla.Dock
                 (GWindows.Scintilla.Scintilla_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Scintilla.Group
                 (GWindows.Scintilla.Scintilla_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Scintilla.Tab_Stop
                 (GWindows.Scintilla.Scintilla_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Scintilla.Enabled
                 (GWindows.Scintilla.Scintilla_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Scintilla.Border
                 (GWindows.Scintilla.Scintilla_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_18;

   --  Control: List Box

   function Create_Index_19
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.List_Boxes.List_Box_Type);
   begin
      GWindows.List_Boxes.Run_Mode 
        (GWindows.List_Boxes.List_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.List_Boxes.Create 
        (GWindows.List_Boxes.List_Box_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Sort => GNAVI_Window.Get_Create_Property (Control_XML, "Sort"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Dock" then
               GWindows.List_Boxes.Dock
                 (GWindows.List_Boxes.List_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.List_Boxes.Group
                 (GWindows.List_Boxes.List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.List_Boxes.Tab_Stop
                 (GWindows.List_Boxes.List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.List_Boxes.Enabled
                 (GWindows.List_Boxes.List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.List_Boxes.Border
                 (GWindows.List_Boxes.List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Visible" then
               GWindows.List_Boxes.Visible
                 (GWindows.List_Boxes.List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_19;

   --  Control: Multiple Selection List Box

   function Create_Index_20
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.List_Boxes.Multiple_Selection_List_Box_Type);
   begin
      GWindows.List_Boxes.Run_Mode 
        (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.List_Boxes.Create 
        (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Sort => GNAVI_Window.Get_Create_Property (Control_XML, "Sort"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Dock" then
               GWindows.List_Boxes.Dock
                 (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.List_Boxes.Group
                 (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.List_Boxes.Tab_Stop
                 (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.List_Boxes.Enabled
                 (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.List_Boxes.Border
                 (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Visible" then
               GWindows.List_Boxes.Visible
                 (GWindows.List_Boxes.Multiple_Selection_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_20;

   --  Control: Combo Box

   function Create_Index_21
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Combo_Boxes.Combo_Box_Type);
   begin
      GWindows.Combo_Boxes.Run_Mode 
        (GWindows.Combo_Boxes.Combo_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Combo_Boxes.Create 
        (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Sort => GNAVI_Window.Get_Create_Property (Control_XML, "Sort"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Combo_Boxes.Visible
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Combo_Boxes.Dock
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Combo_Boxes.Group
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Combo_Boxes.Tab_Stop
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Combo_Boxes.Enabled
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Combo_Boxes.Border
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Alternate_User_Interface" then
               GWindows.Combo_Boxes.Alternate_User_Interface
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Alternate_User_Interface"));
            elsif P = "Dropped" then
               GWindows.Combo_Boxes.Dropped
                 (GWindows.Combo_Boxes.Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Dropped"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_21;

   --  Control: Drop Down Combo Box

   function Create_Index_22
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type);
   begin
      GWindows.Combo_Boxes.Run_Mode 
        (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Combo_Boxes.Create 
        (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Sort => GNAVI_Window.Get_Create_Property (Control_XML, "Sort"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Combo_Boxes.Visible
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Combo_Boxes.Dock
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Combo_Boxes.Group
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Combo_Boxes.Tab_Stop
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Combo_Boxes.Enabled
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Combo_Boxes.Border
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Alternate_User_Interface" then
               GWindows.Combo_Boxes.Alternate_User_Interface
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Alternate_User_Interface"));
            elsif P = "Dropped" then
               GWindows.Combo_Boxes.Dropped
                 (GWindows.Combo_Boxes.Drop_Down_Combo_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Dropped"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_22;

   --  Control: Drop Down List Box

   function Create_Index_23
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Combo_Boxes.Drop_Down_List_Box_Type);
   begin
      GWindows.Combo_Boxes.Run_Mode 
        (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Combo_Boxes.Create 
        (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Sort => GNAVI_Window.Get_Create_Property (Control_XML, "Sort"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Combo_Boxes.Visible
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Combo_Boxes.Dock
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Combo_Boxes.Group
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Combo_Boxes.Tab_Stop
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Combo_Boxes.Enabled
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Combo_Boxes.Border
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Alternate_User_Interface" then
               GWindows.Combo_Boxes.Alternate_User_Interface
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Alternate_User_Interface"));
            elsif P = "Dropped" then
               GWindows.Combo_Boxes.Dropped
                 (GWindows.Combo_Boxes.Drop_Down_List_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Dropped"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_23;

   --  Control: List View Control

   function Create_Index_24
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Common_Controls.List_View_Control_Type);
   begin
      GWindows.Common_Controls.Run_Mode 
        (GWindows.Common_Controls.List_View_Control_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Common_Controls.Create 
        (GWindows.Common_Controls.List_View_Control_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Selection => GWindows.Common_Controls.List_View_Control_Select_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Selection"))),
         View => GWindows.Common_Controls.List_View_Control_View_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "View"))),
         Sort => GWindows.Common_Controls.List_View_Control_Sort_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Sort"))),
         Arrange => GNAVI_Window.Get_Create_Property (Control_XML, "Arrange"),
         Align => GWindows.Common_Controls.List_View_Control_Alignment_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Align"))),
         Show => GNAVI_Window.Get_Create_Property (Control_XML, "Show"),
         Show_Header => GNAVI_Window.Get_Create_Property (Control_XML, "Show_Header"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Common_Controls.Visible
                 (GWindows.Common_Controls.List_View_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Common_Controls.Dock
                 (GWindows.Common_Controls.List_View_Control_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Common_Controls.Group
                 (GWindows.Common_Controls.List_View_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Common_Controls.Tab_Stop
                 (GWindows.Common_Controls.List_View_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Common_Controls.Enabled
                 (GWindows.Common_Controls.List_View_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Common_Controls.Border
                 (GWindows.Common_Controls.List_View_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_24;

   --  Control: Group Box

   function Create_Index_25
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Buttons.Group_Box_Type);
   begin
      GWindows.Buttons.Run_Mode 
        (GWindows.Buttons.Group_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Buttons.Create 
        (GWindows.Buttons.Group_Box_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Buttons.Visible
                 (GWindows.Buttons.Group_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Buttons.Dock
                 (GWindows.Buttons.Group_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Buttons.Group
                 (GWindows.Buttons.Group_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Buttons.Tab_Stop
                 (GWindows.Buttons.Group_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Buttons.Enabled
                 (GWindows.Buttons.Group_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Buttons.Border
                 (GWindows.Buttons.Group_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_25;

   --  Control: Panel

   function Create_Index_26
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Panels.Panel_Type);
   begin
      GWindows.Panels.Run_Mode 
        (GWindows.Panels.Panel_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Panels.Create 
        (GWindows.Panels.Panel_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Panels.Visible
                 (GWindows.Panels.Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Panels.Dock
                 (GWindows.Panels.Panel_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Panels.Group
                 (GWindows.Panels.Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Enabled" then
               GWindows.Panels.Enabled
                 (GWindows.Panels.Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border_Type" then
               GWindows.Panels.Border_Type
                 (GWindows.Panels.Panel_Type (C.all),
                  GWindows.Panels.Panel_Border_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Border_Thickness" then
               GWindows.Panels.Border_Thickness
                 (GWindows.Panels.Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border_Thickness"));
            elsif P = "Background_Color" then
               GWindows.Panels.Background_Color
                 (GWindows.Panels.Panel_Type (C.all),
                  GWindows.Colors.Color_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_26;

   --  Control: Scroll Panel

   function Create_Index_27
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Scroll_Panels.Scroll_Panel_Type);
   begin
      GWindows.Scroll_Panels.Run_Mode 
        (GWindows.Scroll_Panels.Scroll_Panel_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Scroll_Panels.Create 
        (GWindows.Scroll_Panels.Scroll_Panel_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Scroll_Panels.Visible
                 (GWindows.Scroll_Panels.Scroll_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Scroll_Panels.Dock
                 (GWindows.Scroll_Panels.Scroll_Panel_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Scroll_Panels.Group
                 (GWindows.Scroll_Panels.Scroll_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Enabled" then
               GWindows.Scroll_Panels.Enabled
                 (GWindows.Scroll_Panels.Scroll_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_27;

   --  Control: Packing Box

   function Create_Index_28
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Packing_Boxes.Packing_Box_Type);
   begin
      GWindows.Packing_Boxes.Run_Mode 
        (GWindows.Packing_Boxes.Packing_Box_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Packing_Boxes.Create 
        (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Direction => GWindows.Packing_Boxes.Packing_Direction_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Direction"))),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Padding" then
               GWindows.Packing_Boxes.Padding
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Padding"));
            elsif P = "Inset_Left" then
               GWindows.Packing_Boxes.Inset_Left
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Inset_Left"));
            elsif P = "Inset_Top" then
               GWindows.Packing_Boxes.Inset_Top
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Inset_Top"));
            elsif P = "Inset_Right" then
               GWindows.Packing_Boxes.Inset_Right
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Inset_Right"));
            elsif P = "Inset_Bottom" then
               GWindows.Packing_Boxes.Inset_Bottom
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Inset_Bottom"));
            elsif P = "Fill_Width" then
               GWindows.Packing_Boxes.Fill_Width
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Fill_Width"));
            elsif P = "Fill_Height" then
               GWindows.Packing_Boxes.Fill_Height
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Fill_Height"));
            elsif P = "Visible" then
               GWindows.Packing_Boxes.Visible
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Packing_Boxes.Dock
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Packing_Boxes.Group
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Enabled" then
               GWindows.Packing_Boxes.Enabled
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Packing_Boxes.Border
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Auto_Size_To_Contents" then
               GWindows.Packing_Boxes.Auto_Size_To_Contents
                 (GWindows.Packing_Boxes.Packing_Box_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Auto_Size_To_Contents"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_28;

   --  Control: Drawing Panel

   function Create_Index_29
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Drawing_Panels.Drawing_Panel_Type);
   begin
      GWindows.Drawing_Panels.Run_Mode 
        (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Drawing_Panels.Create 
        (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Drawing_Panels.Visible
                 (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Drawing_Panels.Dock
                 (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Drawing_Panels.Group
                 (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Enabled" then
               GWindows.Drawing_Panels.Enabled
                 (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Drawing_Panels.Border
                 (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Auto_Resize" then
               GWindows.Drawing_Panels.Auto_Resize
                 (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Auto_Resize"));
            elsif P = "Background_Color" then
               GWindows.Drawing_Panels.Background_Color
                 (GWindows.Drawing_Panels.Drawing_Panel_Type (C.all),
                  GWindows.Colors.Color_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_29;

   --  Control: Scroll Bar

   function Create_Index_30
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Scroll_Bars.Scroll_Bar_Type);
   begin
      GWindows.Scroll_Bars.Run_Mode 
        (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Scroll_Bars.Create 
        (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
         Parent => Parent.all, 
         Direction => GWindows.Scroll_Bars.Scroll_Direction_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Direction"))),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         ID => GNAVI_Window.Get_Create_Property (Control_XML, "ID"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Scroll_Bars.Visible
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Scroll_Bars.Dock
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Scroll_Bars.Group
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Scroll_Bars.Tab_Stop
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Scroll_Bars.Enabled
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Scroll_Bars.Border
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Scroll_Maximum" then
               GWindows.Scroll_Bars.Scroll_Maximum
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Scroll_Maximum"));
            elsif P = "Scroll_Minimum" then
               GWindows.Scroll_Bars.Scroll_Minimum
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Scroll_Minimum"));
            elsif P = "Scroll_Page_Size" then
               GWindows.Scroll_Bars.Scroll_Page_Size
                 (GWindows.Scroll_Bars.Scroll_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Scroll_Page_Size"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_30;

   --  Control: Up Down Control

   function Create_Index_31
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Common_Controls.Up_Down_Control_Type);
   begin
      GWindows.Common_Controls.Run_Mode 
        (GWindows.Common_Controls.Up_Down_Control_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Common_Controls.Create 
        (GWindows.Common_Controls.Up_Down_Control_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Keyboard => GNAVI_Window.Get_Create_Property (Control_XML, "Keyboard"),
         Direction => GWindows.Common_Controls.Up_Down_Control_Direction_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Direction"))),
         Wrap => GNAVI_Window.Get_Create_Property (Control_XML, "Wrap"),
         Auto_Buddy => GNAVI_Window.Get_Create_Property (Control_XML, "Auto_Buddy"),
         Send_Int => GNAVI_Window.Get_Create_Property (Control_XML, "Send_Int"),
         Thousands => GNAVI_Window.Get_Create_Property (Control_XML, "Thousands"),
         Align => GWindows.Common_Controls.Up_Down_Control_Align_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Align"))),
         Show => GNAVI_Window.Get_Create_Property (Control_XML, "Show"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Common_Controls.Visible
                 (GWindows.Common_Controls.Up_Down_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Common_Controls.Dock
                 (GWindows.Common_Controls.Up_Down_Control_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Common_Controls.Group
                 (GWindows.Common_Controls.Up_Down_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Common_Controls.Tab_Stop
                 (GWindows.Common_Controls.Up_Down_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Common_Controls.Enabled
                 (GWindows.Common_Controls.Up_Down_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Common_Controls.Border
                 (GWindows.Common_Controls.Up_Down_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_31;

   --  Control: Progress Bar

   function Create_Index_32
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.Common_Controls.Progress_Control_Type);
   begin
      GWindows.Common_Controls.Run_Mode 
        (GWindows.Common_Controls.Progress_Control_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.Common_Controls.Create 
        (GWindows.Common_Controls.Progress_Control_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Direction => GWindows.Common_Controls.Progress_Control_Direction_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Direction"))),
         Smooth => GNAVI_Window.Get_Create_Property (Control_XML, "Smooth"),
         Show => GNAVI_Window.Get_Create_Property (Control_XML, "Show"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.Common_Controls.Visible
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Dock" then
               GWindows.Common_Controls.Dock
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GWindows.Base.Dock_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Group" then
               GWindows.Common_Controls.Group
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Tab_Stop" then
               GWindows.Common_Controls.Tab_Stop
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Tab_Stop"));
            elsif P = "Enabled" then
               GWindows.Common_Controls.Enabled
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.Common_Controls.Border
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Position" then
               GWindows.Common_Controls.Position
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Position"));
            elsif P = "Increment" then
               GWindows.Common_Controls.Increment
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Increment"));
            elsif P = "Step_Size" then
               GWindows.Common_Controls.Step_Size
                 (GWindows.Common_Controls.Progress_Control_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Step_Size"));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_32;

   --  Control: GSize Bar

   function Create_Index_33
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.GControls.GSize_Bars.GSize_Bar_Type);
   begin
      GWindows.GControls.GSize_Bars.Run_Mode 
        (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.GControls.GSize_Bars.Create 
        (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
         Parent => Parent.all, 
         Text => GNAVI_Window.Trim_Ends (GNAVI_Window.Get_Create_Property (Control_XML, "Text")),
         Location => GWindows.Base.Dock_Type'Value (GNAVI_Window.Strip_Type (GNAVI_Window.Get_Create_Property (Control_XML, "Location"))),
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.GControls.GSize_Bars.Visible
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Group" then
               GWindows.GControls.GSize_Bars.Group
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Enabled" then
               GWindows.GControls.GSize_Bars.Enabled
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.GControls.GSize_Bars.Border
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Minimum_Size" then
               GWindows.GControls.GSize_Bars.Minimum_Size
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Minimum_Size"));
            elsif P = "Maximum_Size" then
               GWindows.GControls.GSize_Bars.Maximum_Size
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Maximum_Size"));
            elsif P = "Live_Resize" then
               GWindows.GControls.GSize_Bars.Live_Resize
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Live_Resize"));
            elsif P = "Move_Bar_Size" then
               GWindows.GControls.GSize_Bars.Move_Bar_Size
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Move_Bar_Size"));
            elsif P = "Move_Bar_Color" then
               GWindows.GControls.GSize_Bars.Move_Bar_Color
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GWindows.Colors.Color_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Background_Color" then
               GWindows.GControls.GSize_Bars.Background_Color
                 (GWindows.GControls.GSize_Bars.GSize_Bar_Type (C.all),
                  GWindows.Colors.Color_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_33;

   --  Control: GDuration

   function Create_Index_34
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.GControls.Duration.Duration_Type);
   begin
      GWindows.GControls.Duration.Run_Mode 
        (GWindows.GControls.Duration.Duration_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.GControls.Duration.Create 
        (GWindows.GControls.Duration.Duration_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.GControls.Duration.Visible
                 (GWindows.GControls.Duration.Duration_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Group" then
               GWindows.GControls.Duration.Group
                 (GWindows.GControls.Duration.Duration_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Enabled" then
               GWindows.GControls.Duration.Enabled
                 (GWindows.GControls.Duration.Duration_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.GControls.Duration.Border
                 (GWindows.GControls.Duration.Duration_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Duration" then
               GWindows.GControls.Duration.Duration
                 (GWindows.GControls.Duration.Duration_Type (C.all),
                  GWindows.GControls.Duration.GDay_Duration_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Background_Color" then
               GWindows.GControls.Duration.Background_Color
                 (GWindows.GControls.Duration.Duration_Type (C.all),
                  GWindows.Colors.Color_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_34;

   --  Control: GDuration Edit

   function Create_Index_35
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
       C : constant GWindows.Base.Pointer_To_Base_Window_Class :=
         GWindows.Base.Pointer_To_Base_Window_Class'
         (new GWindows.GControls.Duration.Edit.Duration_Edit_Type);
   begin
      GWindows.GControls.Duration.Edit.Run_Mode 
        (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all), GWindows.Base.Development_Create_Start);

      GWindows.GControls.Duration.Edit.Create 
        (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all),
         Parent => Parent.all, 
         Left => GNAVI_Window.Get_Create_Property (Control_XML, "Left"),
         Top => GNAVI_Window.Get_Create_Property (Control_XML, "Top"),
         Width => GNAVI_Window.Get_Create_Property (Control_XML, "Width"),
         Height => GNAVI_Window.Get_Create_Property (Control_XML, "Height"),
         Is_Dynamic => True);

      for N in 1 .. GNAVI_Window.Init_Property_Count (Control_XML) loop
         declare
            P : constant GWindows.GString :=
              GNAVI_Window.Init_Property_Name (Control_XML, N);
         begin
            if P = "Visible" then
               GWindows.GControls.Duration.Edit.Visible
                 (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Visible"));
            elsif P = "Group" then
               GWindows.GControls.Duration.Edit.Group
                 (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Group"));
            elsif P = "Enabled" then
               GWindows.GControls.Duration.Edit.Enabled
                 (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Enabled"));
            elsif P = "Border" then
               GWindows.GControls.Duration.Edit.Border
                 (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all),
                  GNAVI_Window.Get_Init_Property (Control_XML, "Border"));
            elsif P = "Duration" then
               GWindows.GControls.Duration.Edit.Duration
                 (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all),
                  GWindows.GControls.Duration.GDay_Duration_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            elsif P = "Background_Color" then
               GWindows.GControls.Duration.Edit.Background_Color
                 (GWindows.GControls.Duration.Edit.Duration_Edit_Type (C.all),
                  GWindows.Colors.Color_Type'Value
                   (GNAVI_Window.Strip_Type
                    (GNAVI_Window.Init_Property_Value (Control_XML, N))));
            end if;
         end;
      end loop;

      return C;
   end Create_Index_35;

end Control_Creators;
