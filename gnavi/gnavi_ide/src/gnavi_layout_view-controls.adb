with GNAVI_Widget_Vehicle;

with GWindows.Packing_Boxes;
with GWindows.GStrings;
with GWindows.Types;

package body GNAVI_Layout_View.Controls is

   function Dispatch
     (Parent      : GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML : GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class is separate;
   --  Dispatch creation of control. function body is generated by
   --  the Control_Generator application

   procedure Widget_Resize
     (Window : in out GWindows.Base.Base_Window_Type'Class;
      Width  : in     Integer;
      Height : in     Integer);
   --  Change size properties on change of size to widget

   procedure Widget_Move (Window : in out GWindows.Base.Base_Window_Type'Class;
                          Top    : in     Integer;
                          Left   : in     Integer);
   --  Change location properties on move of widget

   procedure Widget_Resize
     (Window : in out GWindows.Base.Base_Window_Type'Class;
      Width  : in     Integer;
      Height : in     Integer)
   is
   pragma Unreferenced (Width, Height);
      use GNAVI_Widget_Vehicle;
      use GWindows.Base;
      use GWindows.GStrings;
      use GNAVI_Window;

      This : GNAVI_Widget_Vehicle_Type renames
        GNAVI_Widget_Vehicle_Type (Window);
       Data : constant Control_Data_Access :=
        Control_Data_Access (Custom_Data (This.Widget.all));
       Size : constant GWindows.Types.Size_Type := Widget_Size (This);
   begin
      Set_All_Property (Data.Win_XML.all, Data.Element,
                        "Width",
                        Image (Size.Width));
      Set_All_Property (Data.Win_XML.all, Data.Element,
                        "Height",
                        Image (Size.Height));
   end Widget_Resize;

   procedure Widget_Move (Window : in out GWindows.Base.Base_Window_Type'Class;
                          Top    : in     Integer;
                          Left   : in     Integer)
   is
   pragma Unreferenced (Top, Left);
      use GNAVI_Widget_Vehicle;
      use GWindows.Base;
      use GWindows.GStrings;
      use GNAVI_Window;

      This : GNAVI_Widget_Vehicle_Type renames
        GNAVI_Widget_Vehicle_Type (Window);
       Data : constant Control_Data_Access :=
        Control_Data_Access (Custom_Data (This.Widget.all));
       Loc  : constant GWindows.Types.Point_Type := Widget_Location (This);
   begin
      Set_All_Property (Data.Win_XML.all, Data.Element,
                        "Left", Image (Loc.X));

      Set_All_Property (Data.Win_XML.all, Data.Element,
                        "Top", Image (Loc.Y));
   end Widget_Move;

   function Create_Control
     (Parent      :        GWindows.Base.Pointer_To_Base_Window_Class;
      Control_XML :        GNAVI_Window.Control_Element)
     return GWindows.Base.Pointer_To_Base_Window_Class
   is
      Control : GWindows.Base.Pointer_To_Base_Window_Class;
      use GWindows.Base;
   begin
      if Parent = null then
         return null;
      end if;
      Control := Dispatch (Parent, Control_XML);
      if Control = null then
         return null;
      end if;

      declare
         use GNAVI_Widget_Vehicle;
         Vehicle : constant GNAVI_Widget_Vehicle_Access :=
           new GNAVI_Widget_Vehicle_Type;
         Data    : constant Control_Data_Access := new Control_Data_Type;
         D       : GWindows.Base.Dock_Type;
      begin
         Data.Element := Control_XML;

         if Control.all in GWindows.Packing_Boxes.Packing_Box_Type'Class then
            Data.Resizes_Children := True;
         end if;

         Data.Win_XML :=
           Control_Data_Access (Custom_Data (Parent.all)).Win_XML;

         Custom_Data (Control.all, Pointer_To_Base_Data_Class (Data));

         if not
           Control_Data_Access (Custom_Data (Parent.all)).Resizes_Children
         then
            D := Dock (Control.all);

            if D = GWindows.Base.None then
               Create_As_Control (Vehicle.all, Parent.all, "",
                                  Left (Control.all), Top (Control.all),
                                  Width (Control.all), Height (Control.all));
               On_Size_Handler (Vehicle.all, Widget_Resize'Access);
               On_Move_Handler (Vehicle.all, Widget_Move'Access);

               GWindows.Base.Parent (Control.all, Vehicle.all);

               Set_Widget (Vehicle.all, Control);
               Dock (Vehicle.all, D);
            end if;
         end if;

         return Control;
      end;

   end Create_Control;

end GNAVI_Layout_View.Controls;
