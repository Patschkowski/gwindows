------------------------------------------------------------------------------
--                                                                          --
--       GNAVI - The GNU Ada Visual Interface - Open Source Visual RAD      --
--                                                                          --
--             G N A V I _ T E M P L A T E S . E M B E D D E D              --
--                                                                          --
--                                 B o d y                                  --
--                                                                          --
--                                                                          --
--                  Copyright (C) 2024 Gautier de Montmollin                --
--                                                                          --
-- This is free software;  you can  redistribute it  and/or modify it under --
-- terms of the  GNU General Public License as published  by the Free Soft- --
-- ware  Foundation;  either version 2,  or (at your option) any later ver- --
-- sion. It is distributed in the hope that it will be useful,  but WITHOUT --
-- ANY WARRANTY;  without  even the  implied warranty of MERCHANTABILITY or --
-- FITNESS FOR A PARTICULAR PURPOSE.    See the GNU General  Public License --
-- for  more details.  You should have  received  a copy of the GNU General --
-- Public License  distributed with this;  see file COPYING.  If not, write --
-- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --
-- MA 02111-1307, USA.                                                      --
--                                                                          --
-- More information about GNAVI and the most current version can            --
-- be located on the web at one of the following places:                    --
--   https://sourceforge.net/projects/gnavi/                                --
--   https://github.com/zertovitch/gwindows                                 --
--                                                                          --
------------------------------------------------------------------------------

package body GNAVI_Templates.Embedded is

   function Get_Template
      (Template      : Embedded_Template_Kind;
       Template_Name : String := "")
      return String
   is

      initially_generated : constant String :=
         "--  This code was initially generated." & NL &
         "--  You may want to complete it.";

      who_generates : constant String := "--  Generated by: GNAVI ICG (Interactive Code Generator).";

   begin
      case Template is

         when on_create_template =>
            return
               "--  This file contains only automatically generated code." & NL &
               "--  DO NOT MODIFY !" & NL &
               "--  Change the GNAVI item & properties instead." & NL &
               who_generates & NL &
               NL &
               "with GWindows.Application;" & NL &
               "with GWindows.Drawing_Objects;" & NL &
               NL &
               "separate (@_Window_Name_@_Package)" & NL &
               "procedure On_Create (Window : in out @_Window_Name_@_Type)" & NL &
               "is" & NL &
               "begin" & NL;

         when window_package_spec_template =>
            return
               initially_generated & NL &
               who_generates & NL &
               NL &
               "with @_Window_Type_Package_@;" & NL &
               "with GWindows.Base;" & NL &
               NL &
               "package @_Window_Name_@_Package is" & NL &
               NL &
               "   -------------------------------------------------------------------------" & NL &
               "   --  @_Window_Name_@ Specs" & NL &
               "   -------------------------------------------------------------------------" & NL &
               NL &
               "   type @_Window_Name_@_Type is" & NL &
               "     new @_Window_Type_@ with" & NL &
               "      record" & NL &
               "         --  GNAVI: Controls" & NL &
               "         null;" & NL &
               "         --  GNAVI: Add custom data below this comment" & NL &
               "      end record;" & NL &
               NL &
               "   type @_Window_Name_@_Access is" & NL &
               "     access all @_Window_Name_@_Type;" & NL &
               NL &
               "   type Pointer_To_@_Window_Name_@_Class is" & NL &
               "     access all @_Window_Name_@_Type'Class;" & NL &
               NL &
               "   procedure On_Create (Window : in out @_Window_Name_@_Type);" & NL &
               NL &
               "   @_Window_Name_@ : @_Window_Name_@_Type;" & NL &
               "   --  Global instance (you should not need it...)" & NL &
               NL &
               "   -------------------------------------------------------------------------" & NL &
               "   --  Handlers" & NL &
               "   -------------------------------------------------------------------------" & NL &
               NL &
               "end @_Window_Name_@_Package;";

         when window_package_body_template =>
            return
               initially_generated & NL &
               who_generates & NL &
               NL &
               "package body @_Window_Name_@_Package is" & NL &
               NL &
               "   procedure On_Create (Window : in out @_Window_Name_@_Type) is separate;" & NL &
               NL &
               "   -------------------------------------------------------------------------" & NL &
               "   --  Handlers" & NL &
               "   -------------------------------------------------------------------------" & NL &
               NL &
               "--  GNAVI: Create global instance (probably you'll want to delete this...)" & NL &
               "begin" & NL &
               "   Create (@_Window_Name_@@_Create_Params_@);" & NL &
               "end @_Window_Name_@_Package;";

         when application_template =>
            return
               initially_generated & NL &
               who_generates & NL &
               NL &
               "with GWindows.Application;" & NL &
               NL &
               "procedure @_Application_Name_@ is" & NL &
               "   pragma Linker_Options (""-mwindows"");" & NL &
               NL &
               "begin" & NL &
               "   --  Global instances of project's windows have been created at this point." & NL &
               "   GWindows.Application.Message_Loop;" & NL &
               "end @_Application_Name_@;";

         when handler_template =>
            return
               (if Template_Name = "" then
                  ""
                elsif Template_Name = "gwindows.base.action_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.base.action_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class);"

                elsif Template_Name = "gwindows.base.location_action_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      X      : in     Integer;" & NL &
                  "      Y      : in     Integer)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.base.location_action_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      X      : in     Integer;" & NL &
                  "      Y      : in     Integer);"

                elsif Template_Name = "gwindows.base.pre_create_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window    : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      dwStyle   : in out Interfaces.C.unsigned;" & NL &
                  "      dwExStyle : in out Interfaces.C.unsigned)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.base.pre_create_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window    : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      dwStyle   : in out Interfaces.C.unsigned;" & NL &
                  "      dwExStyle : in out Interfaces.C.unsigned);"

                elsif Template_Name = "gwindows.base.scroll_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window  : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Request : in     GWindows.Base.Scroll_Request_Type)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.base.scroll_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window  : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Request : in     GWindows.Base.Scroll_Request_Type);"

                elsif Template_Name = "gwindows.windows.character_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Special_Key : in     GWindows.Windows.Special_Key_Type;" & NL &
                  "      Value       : in     GCharacter)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.character_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window      : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Special_Key : in     GWindows.Windows.Special_Key_Type;" & NL &
                  "      Value       : in     GCharacter);"

                elsif Template_Name = "gwindows.windows.close_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window    : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Can_Close :    out Boolean)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.close_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window    : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Can_Close :    out Boolean);"

                elsif Template_Name = "gwindows.windows.file_drop_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window     : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      File_Names : in     GWindows.Windows.Array_Of_File_Names);" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.file_drop_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window     : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      File_Names : in     GWindows.Windows.Array_Of_File_Names);"

                elsif Template_Name = "gwindows.windows.hover_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Item   : in     Integer;" & NL &
                  "      Kind   : in     GWindows.Windows.Hover_Item_Type)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.hover_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Item   : in     Integer;" & NL &
                  "      Kind   : in     GWindows.Windows.Hover_Item_Type);"

                elsif Template_Name = "gwindows.windows.location_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Top    : in     Integer;" & NL &
                  "      Left   : in     Integer)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.location_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Top    : in     Integer;" & NL &
                  "      Left   : in     Integer);"

                elsif Template_Name = "gwindows.windows.mouse_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      X      : in     Integer;" & NL &
                  "      Y      : in     Integer;" & NL &
                  "      Keys   : in     GWindows.Windows.Mouse_Key_States)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.mouse_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      X      : in     Integer;" & NL &
                  "      Y      : in     Integer;" & NL &
                  "      Keys   : in     GWindows.Windows.Mouse_Key_States);"

                elsif Template_Name = "gwindows.windows.paint_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Canvas : in out GWindows.Drawing.Canvas_Type;" & NL &
                  "      Area   : in     GWindows.Types.Rectangle_Type)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.paint_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Canvas : in out GWindows.Drawing.Canvas_Type;" & NL &
                  "      Area   : in     GWindows.Types.Rectangle_Type);"

                elsif Template_Name = "gwindows.windows.select_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Item   : in     Integer)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.select_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Item   : in     Integer);"

                elsif Template_Name = "gwindows.windows.size_event.adb" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Width  : in     Integer;" & NL &
                  "      Height : in     Integer)" & NL &
                  "   is" & NL &
                  "   begin" & NL &
                  "      null;" & NL &
                  "   end @_Handler_Name_@;"

                elsif Template_Name = "gwindows.windows.size_event.ads" then
                  "   procedure @_Handler_Name_@" & NL &
                  "     (Window : in out GWindows.Base.Base_Window_Type'Class;" & NL &
                  "      Width  : in     Integer;" & NL &
                  "      Height : in     Integer);"
                else
                  "   --  !! Template not found: " & Template_Name)
              & NL;

            --  The embedding of handler templates above was done with...
            -------------------------------------------------------------
            --
            --  a.cmd:
            ----------
            --
            --  echo.>res.txt
            --  for %%a in (*.ad*) do hac to_template.hac %%a >>res.txt
            --
            --  to_template.hac, from HAC Ada Compiler copy_file.adb example:
            -----------------------------------------------------------------
            --
            --  with HAT;
            --
            --  procedure To_Template is
            --    use HAT;
            --    s : VString;
            --    f1 : File_Type;
            --  begin
            --    Put_Line ("                elsif Template_Name = """ & Argument (1) & """ then");
            --    Open (f1, Argument (1));
            --    loop
            --      Get_Line (f1, s);
            --      if End_Of_File (f1) then
            --        Put_Line ("                  """ & s & """");
            --        exit;
            --      else
            --        Put_Line ("                  """ & s & """ & NL &");
            --      end if;
            --    end loop;
            --    Close (f1);
            --    New_line;
            --  end To_Template;

      end case;
   end Get_Template;

end GNAVI_Templates.Embedded;
